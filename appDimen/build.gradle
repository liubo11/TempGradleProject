apply plugin: 'com.android.application'

def flavName = ['flv1':'flv1Name_',
               'flv2':'flv2Name_']

android {
    compileSdkVersion rootProject.projectConfig.compileSdkVersion

    /*
    //方式1
    sourceSets {
		flv1 {
		    manifest.srcFile 'AndroidManifest.xml'
		}
		flv2 {
		    manifest.srcFile 'AndroidManifest.xml'
		}
	}

    //方式2
    sourceSets {
        //
        sourceSets.all { sourceSet ->
            if (sourceSet.name.contains('Debug') || sourceSet.name.contains('Release')) {
                if (sourceSet.name.contains("xxx")) {
                    sourceSet.java.srcDirs = ['a/b/c', 'd/f']
                    sourceSet.manifest.srcFile 'xxx/AndroidManifest.xml'
                } else {
                    sourceSet.manifest.srcFile 'yyy/AndroidManifest.xml'
                }
            }
        }
    }*/

    signingConfigs {
        debug {
        }
        release {
            storeFile file("keystore/lbReleaseAlpha1.jks")
            storePassword "123456"
            keyAlias "com.lb.release.alpha1"
            keyPassword "123456"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //配置自定义打包名称
    applicationVariants.all { variant ->
        variant.outputs.all {
            def apkTypeName = "-"

            if (flavName.containsKey(variant.flavorName)) {
                apkTypeName = flavName[variant.flavorName]
            }

            if (variant.buildType.name == 'release') {
                //修改目录
                File outputDirectory = file("releaseApk")
                if (!outputDirectory.exists() || !outputDirectory.isDirectory()) {
                    outputDirectory.mkdir()
                }
                variant.getPackageApplication().outputDirectory = outputDirectory
                outputFileName = "${apkTypeName}${releaseTime()}-${variant.versionName}.${variant.versionCode}.apk"
            }
        }
    }
    
    lintOptions {
        //出现错误不终止构建
        abortOnError    false
        //不输入日志
        htmlReport      false
        //不输入日志
        xmlReport       false
        //release 时检测fatal等级
        checkReleaseBuilds true
        disable         'MissingTranslation', 'ExtraTranslation'
    }

    flavorDimensions "fd"
    productFlavors {
        flv1 {
            applicationId       "com.lb.fd1"
            minSdkVersion       rootProject.projectConfig.minSdkVersion
            targetSdkVersion    rootProject.projectConfig.targetSdkVersion
            versionCode         rootProject.projectVersion.versionCode
            versionName         rootProject.projectVersion.versionName
            dimension           "fd"
            signingConfig       signingConfigs.release
        }
        flv2 {
            applicationId       "com.lb.fd2"
            minSdkVersion       rootProject.projectConfig.minSdkVersion
            targetSdkVersion    rootProject.projectConfig.targetSdkVersion
            versionCode         rootProject.projectVersion.versionCode
            versionName         rootProject.projectVersion.versionName
            dimension           "fd"
            signingConfig       signingConfigs.release
        }
    }
}

//不同情形采用不同的依赖
configurations {
    flv1Api
    flv1DebugImplementation
    flv1ReleaseImplementation
    flv2DebugImplementation
    flv2ReleaseImplementation
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //debugCompile project(path: ':moduleA', configuration: 'debug')
    //releaseCompile project(path: ':moduleA', configuration: 'release')

    flv1Implementation 'com.android.support:appcompat-v7:28.0.0'
}

task execTsTask {
    println("start cmd: dir")

    def out = new ByteArrayOutputStream()
    //执行命令
    exec {
        workingDir projectDir.getPath()
        commandLine 'cmd', '/c', 'dir'
        standardOutput = out
    }

    //println("test cmd: \n ${new String(out.toByteArray())}")
}

task dbTask {
    println("xxxxxxxx="+name)



}

preBuild.dependsOn dbTask